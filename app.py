import streamlit as st
import tensorflow as tf
import cv2
import numpy as np
from PIL import Image
import os
from pathlib import Path

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
MODEL_PATH = Path('models/DenseNet121_cow_weight.h5') # <<--- ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô
IMG_SIZE = (224, 224)

# Cache ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
@st.cache_resource
def load_keras_model(model_path):
    """Loads the compiled Keras model."""
    try:
        model = tf.keras.models.load_model(model_path)
        print(f"Model loaded successfully from {model_path}")
        return model
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
        print(f"Error loading model: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Preprocess ‡∏†‡∏≤‡∏û (‡∏¢‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å w1.py)
def preprocess_image(image_bytes):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏à‡∏≤‡∏Å Bytes)
    - Decode
    - Resize
    - Normalize
    """
    try:
        # Decode image using OpenCV
        nparr = np.frombuffer(image_bytes, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        if img is None:
             raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ decode ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Streamlit ‡πÉ‡∏ä‡πâ RGB
        img_resized = cv2.resize(img, IMG_SIZE)
        img_normalized = img_resized.astype(np.float32) / 255.0
        return img_normalized
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û: {e}")
        print(f"Error preprocessing image: {e}")
        return None

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit ---
st.set_page_config(layout="wide")
st.title("üêÆ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ß‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢ 4 ‡∏°‡∏∏‡∏° (‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏´‡∏•‡∏±‡∏á, ‡∏Ç‡∏ß‡∏≤) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = load_keras_model(MODEL_PATH)

if model is not None:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Columns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        uploaded_file_0 = st.file_uploader("1. ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (_0)", type=["png", "jpg", "jpeg"])
        if uploaded_file_0 is not None:
            image_0 = Image.open(uploaded_file_0)
            st.image(image_0, caption='‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢', use_column_width=True)

    with col2:
        uploaded_file_1 = st.file_uploader("2. ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (_1)", type=["png", "jpg", "jpeg"])
        if uploaded_file_1 is not None:
            image_1 = Image.open(uploaded_file_1)
            st.image(image_1, caption='‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤', use_column_width=True)

    with col3:
        uploaded_file_2 = st.file_uploader("3. ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á (_2)", type=["png", "jpg", "jpeg"])
        if uploaded_file_2 is not None:
            image_2 = Image.open(uploaded_file_2)
            st.image(image_2, caption='‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á', use_column_width=True)

    with col4:
        uploaded_file_3 = st.file_uploader("4. ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ (_3)", type=["png", "jpg", "jpeg"])
        if uploaded_file_3 is not None:
            image_3 = Image.open(uploaded_file_3)
            st.image(image_3, caption='‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤', use_column_width=True)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    if st.button("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö 4 ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if uploaded_file_0 and uploaded_file_1 and uploaded_file_2 and uploaded_file_3:
            try:
                # ‡∏≠‡πà‡∏≤‡∏ô Bytes ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
                img_bytes_0 = uploaded_file_0.getvalue()
                img_bytes_1 = uploaded_file_1.getvalue()
                img_bytes_2 = uploaded_file_2.getvalue()
                img_bytes_3 = uploaded_file_3.getvalue()

                # Preprocess ‡∏†‡∏≤‡∏û
                img_proc_0 = preprocess_image(img_bytes_0) # ‡∏ã‡πâ‡∏≤‡∏¢
                img_proc_1 = preprocess_image(img_bytes_1) # ‡∏´‡∏ô‡πâ‡∏≤
                img_proc_2 = preprocess_image(img_bytes_2) # ‡∏´‡∏•‡∏±‡∏á
                img_proc_3 = preprocess_image(img_bytes_3) # ‡∏Ç‡∏ß‡∏≤

                if all(img is not None for img in [img_proc_0, img_proc_1, img_proc_2, img_proc_3]):

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Input list ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: [‡∏´‡∏ô‡πâ‡∏≤, ‡∏´‡∏•‡∏±‡∏á, ‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤])
                    model_input = [
                        np.expand_dims(img_proc_1, axis=0), # ‡∏´‡∏ô‡πâ‡∏≤
                        np.expand_dims(img_proc_2, axis=0), # ‡∏´‡∏•‡∏±‡∏á
                        np.expand_dims(img_proc_0, axis=0), # ‡∏ã‡πâ‡∏≤‡∏¢
                        np.expand_dims(img_proc_3, axis=0)  # ‡∏Ç‡∏ß‡∏≤
                    ]

                    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
                    with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•...'):
                        prediction = model.predict(model_input)
                        estimated_weight = prediction[0][0]

                    st.success(f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ß‡∏±‡∏ß‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: **{estimated_weight:.2f} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°**")
                else:
                    st.warning("‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•: {e}")
                print(f"Prediction Error: {e}")
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 4 ‡∏°‡∏∏‡∏°")
else:
    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (Optional)
st.caption("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ [‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°]")